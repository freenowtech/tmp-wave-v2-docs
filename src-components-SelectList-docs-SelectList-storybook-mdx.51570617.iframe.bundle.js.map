{"version":3,"file":"src-components-SelectList-docs-SelectList-storybook-mdx.51570617.iframe.bundle.js","mappings":";;AAWA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;AAIA;;;;;ACVA;AACA;AACA;;;AAGA;AACA;AACA;;;ACjBA;;AAEA;;;;;;;ACgCA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Link/Link.tsx","webpack://@freenow/wave/./src/components/SelectList/components/Label.tsx","webpack://@freenow/wave/./src/components/SelectList/components/Wrapper.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, fontSize, FontSizeProps, margin, MarginProps, textAlign, TextAlignProps } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'>, MarginProps, FontSizeProps, TextAlignProps {}\n\nconst Link = styled.a.attrs({ theme })<LinkProps>`\n    display: inline-block;\n    color: ${getSemanticValue('foreground-accent-default')};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.2')};\n    font-weight: ${get('fontWeights.semibold')};\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n        color: ${getSemanticValue('foreground-accent-default')};\n    }\n\n    &:hover,\n    &:active {\n        color: ${getSemanticValue( 'foreground-accent-emphasized')};\n        text-decoration: underline;\n    }\n\n    ${compose(margin, fontSize, textAlign)}\n`;\n\nexport { Link, LinkProps };\n","import { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { getSemanticValue } from '../../../utils/cssVariables';\nimport { get } from '../../../utils/themeGet';\nimport { disabledStyles, errorStyles, variantStyles } from '../styles';\nimport { Size, Variant } from '../types';\n\ninterface LabelProps {\n    error?: boolean;\n    isDisabled?: boolean;\n    size: Size;\n    variant: Variant;\n    children: ReactNode;\n}\n\nexport const Label = styled.label<LabelProps>`\n    position: absolute;\n    pointer-events: none;\n    line-height: 1;\n    font-weight: ${get('fontWeights.semibold')};\n    background: ${getSemanticValue('background-page-default')};\n    color: ${getSemanticValue('foreground-neutral-emphasized')};\n    transition: color 125ms ease;\n\n    ${p => p.error && errorStyles.label()}\n    ${({ isDisabled }) => isDisabled && disabledStyles.label}\n    ${({ variant, size }) => variantStyles.label({ variant, size })}\n`;\n","import styled from 'styled-components';\nimport { compose, margin, MarginProps, width, WidthProps } from 'styled-system';\n\nimport { ClassNameProps } from '../../../utils/extractProps';\nimport { get } from '../../../utils/themeGet';\n\ntype WrapperProps = ClassNameProps & MarginProps & WidthProps;\n\nexport const Wrapper = styled.div<WrapperProps>`\n    position: relative;\n    font-family: ${get('fonts.normal')};\n\n    ${compose(margin, width)}\n\n    &,\n    & * {\n        box-sizing: border-box;\n    }\n`;\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}