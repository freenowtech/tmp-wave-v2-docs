{"version":3,"file":"src-components-ColorScheme-docs-DarkScheme-storybook-mdx.410a0a13.iframe.bundle.js","mappings":";;AAaA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;ACWA;;;;ACGA;;;;AAIA;AACA;;;;;;;;;;;;;AAaA;;;;ACkBA;AAGA;AC/BA;AAoBA;AACA;;;;AAIA;;;;;AC7CA;AACA;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;AAvCA;;;;;;;;;ACWA;;;;AAIA;;;;;;ACRA;;;AAGA","sources":["webpack://@freenow/wave/./docs/components/ItemWrapper.ts","webpack://@freenow/wave/./src/components/Box/Box.tsx","webpack://@freenow/wave/./src/components/Button/BaseButton.tsx","webpack://@freenow/wave/./src/components/Button/Button.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx","webpack://@freenow/wave/./src/components/Toggle/Slide.tsx","webpack://@freenow/wave/./src/components/Toggle/Input.tsx","webpack://@freenow/wave/./src/components/Toggle/Label.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { compose, margin, MarginProps, padding, PaddingProps } from 'styled-system';\nimport { Spaces } from '../../src/essentials';\nimport { getSemanticValue } from '../../src/utils/cssVariables';\n\ntype ItemWrapperProps = PaddingProps &\n    MarginProps & {\n        inverted?: boolean;\n        gridTemplate?: string;\n    };\n\nconst ItemWrapper = styled.div<ItemWrapperProps>`\n    align-items: end;\n    padding: ${Spaces[2]} ${Spaces[4]};\n    margin-left: -${Spaces[4]};\n    margin-right: -${Spaces[4]};\n    display: grid;\n    grid-template-columns: ${p => (p.gridTemplate ? p.gridTemplate : '1fr')};\n    grid-row-gap: ${Spaces[3]};\n    grid-column-gap: ${Spaces[2]};\n    background-color: ${getSemanticValue('background-page-default')};\n\n    ${compose(padding, margin)}\n`;\n\nexport { ItemWrapper };\n","import styled from 'styled-components';\nimport {\n    background,\n    BackgroundProps,\n    color,\n    ColorProps,\n    compose,\n    flexbox,\n    FlexboxProps,\n    grid,\n    GridProps,\n    layout,\n    LayoutProps,\n    position,\n    PositionProps,\n    space,\n    SpaceProps,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\n\ninterface BoxProps\n    extends SpaceProps,\n        LayoutProps,\n        PositionProps,\n        Omit<ColorProps, 'color'>, // HACK: avoid collision of `color` prop\n        FlexboxProps,\n        GridProps,\n        BackgroundProps,\n        TextAlignProps {}\n\nconst Box = styled.div.attrs({ theme })<BoxProps>`\n    ${compose(space, layout, position, color, flexbox, grid, background, textAlign)}\n`;\n\nexport { Box, BoxProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant, width, WidthProps } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface BaseButtonProps extends ComponentPropsWithoutRef<'button'>, MarginProps, WidthProps {\n    /**\n     * Adjusts the size of the button\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            minWidth: '5rem',\n            padding: '0 0.75rem'\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            minWidth: '6.25rem',\n            padding: '0 1rem'\n        }\n    }\n});\n\n// \"svg path\" fill set to \"inherit\" to being able to transition using button variants\nconst BaseButton = styled.button.attrs({ theme })<BaseButtonProps>`\n    align-items: center;\n    background: transparent;\n    border-radius: ${get('radii.2')};\n    border: 0.0625rem solid transparent;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.semibold')};\n    justify-content: center;\n    text-align: center;\n    text-decoration: none;\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    svg path {\n        fill: inherit;\n    }\n\n    ${compose(margin, sizeVariant, width)}\n`;\n\nexport { BaseButton, BaseButtonProps };\n","import styled from 'styled-components';\nimport { ButtonStyleProps, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../essentials/theme';\n\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { BaseButton, BaseButtonProps } from './BaseButton';\nimport { ComponentSemanticTokens } from '../../essentials/Colors/types';\n\ntype Variant = 'primary' | 'secondary' | 'danger';\n\ninterface ButtonProps extends BaseButtonProps, ButtonStyleProps {\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    variant?: ResponsiveValue<Variant>;\n}\n\nconst variantStyles = variant<ComponentSemanticTokens, Variant>({\n    variants: {\n        primary: {\n            color: getSemanticValue('foreground-on-background-primary'),\n            fill: getSemanticValue('foreground-on-background-primary'),\n            background: getSemanticValue('background-element-primary-default'),\n\n            '&:hover': {\n                color: getSemanticValue('foreground-on-background-accent'),\n                background: getSemanticValue('background-element-primary-emphasized')\n            },\n\n            '&:disabled': {\n                color: getSemanticValue('foreground-on-background-disabled'),\n                background: getSemanticValue('background-element-disabled-default')\n            }\n        },\n        secondary: {\n            color: getSemanticValue('foreground-primary'),\n            fill: getSemanticValue('foreground-primary'),\n            background: getSemanticValue('background-page-default'),\n            borderColor: getSemanticValue('border-neutral-default'),\n\n            '&:hover': {\n                color: getSemanticValue('foreground-on-background-neutral'),\n                background: getSemanticValue('background-element-neutral-emphasized')\n            },\n\n            '&:disabled': {\n                color: getSemanticValue('foreground-disabled'),\n                fill: getSemanticValue('foreground-disabled'),\n                background: getSemanticValue('transparent'),\n                borderColor: getSemanticValue('border-disabled')\n            }\n        },\n        danger: {\n            color: getSemanticValue('foreground-on-background-danger'),\n            fill: getSemanticValue('foreground-on-background-danger'),\n            background: getSemanticValue('background-element-danger-default'),\n\n            '&:hover': {\n                background: getSemanticValue('background-element-danger-emphasized')\n            },\n\n            '&:disabled': {\n                background: getSemanticValue('background-element-disabled-default'),\n                borderColor: getSemanticValue('border-disabled')\n            }\n        }\n    }\n});\n\nconst Button = styled(BaseButton).attrs({ theme })<ButtonProps>`\n    transition: background ease 200ms, border-color ease 200ms, color ease 200ms, fill ease 200ms;\n\n    ${variantStyles};\n`;\n\nButton.defaultProps = {\n    size: 'medium',\n    variant: 'primary'\n};\n\nexport { Button, ButtonProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n","import styled from 'styled-components';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\nconst determineBackground = (props: SlideProps) => {\n    if (props.disabled) {\n        return getSemanticValue('background-element-disabled-faded');\n    }\n\n    if (props.error) {\n        return getSemanticValue('background-element-danger-default');\n    }\n\n    return getSemanticValue('background-element-accent-emphasized');\n};\n\ninterface SlideProps {\n    disabled?: boolean;\n    error?: boolean;\n}\n\nconst Slide = styled.div<SlideProps>`\n    width: 2.25rem;\n    height: 1rem;\n\n    cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n    background: ${props =>\n        // background-element-disabled-default is used for en enabled state\n        // because this is the only time this pair of colors used for a background of an enabled element\n        // create a new semantic token when another such use case appear\n        getSemanticValue(props.disabled ? 'background-element-disabled-faded' : 'background-element-disabled-default')};\n    display: inline-block;\n    border-radius: 0.5rem;\n    position: relative;\n    margin-right: 0.5rem;\n\n    &::before {\n        content: '';\n        position: absolute;\n        top: -0.125rem;\n        left: 0;\n        width: 1.25rem;\n        height: 1.25rem;\n        background: ${props =>\n            getSemanticValue(\n                props.disabled ? 'background-element-disabled-faded' : 'background-element-neutral-default'\n            )};\n        border-radius: 50%;\n        box-shadow: 0 0 0.0625rem 0 rgba(0, 0, 0, 0.05), 0 0.0625rem 0.1875rem 0 rgba(0, 0, 0, 0.4);\n        transform: translateX(0);\n        transition: transform 200ms;\n    }\n\n    &::after {\n        content: '';\n        display: block;\n        border-radius: 0.5rem;\n        width: 1rem;\n        height: 1rem;\n        background-color: ${determineBackground};\n        transition: width 200ms;\n    }\n`;\n\nexport { Slide };\n","import styled from 'styled-components';\nimport { Slide } from './Slide';\n\ninterface InputProps {\n    disabled?: boolean;\n    error?: boolean;\n}\n\nconst Input = styled.input<InputProps>`\n    height: 0;\n    width: 0;\n    margin: 0;\n    visibility: hidden;\n\n    &:checked + ${/* sc-selector */ Slide}::before {\n        transform: translateX(calc(100% - 0.25rem));\n    }\n\n    &:checked + ${/* sc-selector */ Slide}::after {\n        width: 2.25rem;\n    }\n`;\n\nexport { Input };\n","import styled from 'styled-components';\nimport { margin, MarginProps } from 'styled-system';\n\ninterface LabelProps extends MarginProps {\n    disabled?: boolean;\n}\n\nconst Label = styled.label<LabelProps>`\n    display: flex;\n    align-items: center;\n    cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n    user-select: none;\n\n    ${margin}\n`;\n\nexport { Label };\n"],"names":[],"sourceRoot":""}